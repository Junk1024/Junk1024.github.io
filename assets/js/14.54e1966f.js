(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{436:function(s,n,a){"use strict";a.r(n);var e=a(3),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"let-和-const"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#let-和-const"}},[s._v("#")]),s._v(" Let 和 Const")]),s._v(" "),n("p",[s._v("1.let 是用来声明变量的，有四个特性")]),s._v(" "),n("ul",[n("li",[s._v("let 不能重复声明变量")]),s._v(" "),n("li",[s._v("存在块级作用域，块级作用域外不能正常访问（同一级）")]),s._v(" "),n("li",[s._v("不存在作用域提升")]),s._v(" "),n("li",[s._v("不影响作用域链，子作用域可以正常通过作用域链访问变量")])]),s._v(" "),n("p",[s._v("案例实践，页面有三个 DIV，需要实现点击变色效果")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("<script>\n  // 先拿到元素\n  let items = document.getElementsByClassName('item')\n  // 然后遍历，下面这个是以前的写法，let出现以后可用第二种\n  // for (var i = 0;i < items.length;i++) {\n  //   items[i].onclick = function() {\n  //     this.style.background = 'pink'\n  //   }\n  // }\n  for (let i = 0;i < items.length;i++) {\n    items[i].onclick = function() {\n      items[i].style.background = 'pink'\n    }\n  }\n<\/script>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("值得一提的是，在循环中使用 var 声明的变量没有块级作用域，那么循环中的变量 i 一直会是循环结束后的值，此例中为 3")]),s._v(" "),n("p",[s._v("2.const 是用来声明常量的，有五个特性")]),s._v(" "),n("ul",[n("li",[s._v("用 const 声明常量一定要赋初始值")]),s._v(" "),n("li",[s._v("常量的值不能修改")]),s._v(" "),n("li",[s._v("存在块级作用域")]),s._v(" "),n("li",[s._v("对数组对象的修改不算对常量的修改")]),s._v(" "),n("li",[s._v("常量名要用全大写(潜规则，代码风格)")])]),s._v(" "),n("h2",{attrs:{id:"解构赋值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解构赋值"}},[s._v("#")]),s._v(" 解构赋值")]),s._v(" "),n("p",[s._v("ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构赋值；")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 1、数组的解构赋值\nconst SEASON=["春","夏","秋","冬"];\nlet [a,b,c,d]=SEASON;\n// 这就相当于我们声明4个变量a,b,c,d，其值分别对应"春","夏","秋","冬"\nconsole.log(a + b + c + d); // 春夏秋冬\n//2、对象的解构赋值\nconst BOY = {\n  name : "大哥",\n  age : 22,\n  sex : "男",\n  xiaopin : function(){\n    console.log("我会唱跳！");\n  }\n}\nlet {name,age,sex,xiaopin} = BOY; // 注意解构对象这里用的是{}\nconsole.log(name + age + sex + xiaopin); // 大哥22男function(){console.log("我会唱跳！");}\nxiaopin(); //我会唱跳！\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("h2",{attrs:{id:"模板字符串-新的字符串声明方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模板字符串-新的字符串声明方式"}},[s._v("#")]),s._v(" 模板字符串--新的字符串声明方式")]),s._v(" "),n("p",[s._v("模板字符串（template string）是增强版的字符串，用反单引号（`）标识，特点：")]),s._v(" "),n("ul",[n("li",[s._v("字符串中可以出现换行符；")]),s._v(" "),n("li",[s._v("可以使用 ${xxx} 形式引用变量实现字符串拼接；")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 声明\nlet string = `我也是一个字符串奥！`;\nconsole.log(string);//我也是一个字符串奥！\n// 特性\n// 1、字符串中可以出现换行符\nlet str =\n    `<ul>\n    <li>春</li>\n    <li>夏</li>\n    <li>秋</li>\n    <li>冬</li>\n  </ul>`;\nconsole.log(str);//支持换行符号打印\n// 2、可以使用 ${xxx} 形式引用变量实现字符串的拼接\nlet s = \"秋\";\n//let out = s + '是我最喜欢的季节！';以前的写法\nlet out = `${s}是我最喜欢的季节！`;\nconsole.log(out);//秋是我最喜欢的季节！\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("h2",{attrs:{id:"简化对象和函数的写法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简化对象和函数的写法"}},[s._v("#")]),s._v(" 简化对象和函数的写法")]),s._v(" "),n("p",[s._v("ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('//完整写法\nconst GIRL = {\n  name：name，\n  age：age，\n  say：function () {\n    console.log("我喜欢你！")\n  }\n}\n//简化写法\nconst GIRL = {\n  name，\n  age，\n  say() {\n    console.log("我喜欢你！")\n  }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("h2",{attrs:{id:"箭头函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数"}},[s._v("#")]),s._v(" 箭头函数")]),s._v(" "),n("p",[s._v("ES6 允许使用箭头（=>）定义函数，箭头函数提供了一种更加简洁的函数书写方式，箭头函数多用于匿名函数的定义； 1.箭头函数的特性")]),s._v(" "),n("ul",[n("li",[s._v("箭头函数的 this 指向是静态的，指向声明时作用域的 this 值")]),s._v(" "),n("li",[s._v("不能作为构造函数实例化对象")]),s._v(" "),n("li",[s._v("不能使用 arguements\n箭头函数的简写")]),s._v(" "),n("li",[s._v("当形参有且只有一个的时候可以省略小括号;")]),s._v(" "),n("li",[s._v("函数体如果只有一条语句，则花括号可以省略，函数的返回值为该条语句的执行结果，不需要加 return；")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1.箭头函数的this指向是静态的，指向声明时作用域的this值\nfunction getname(){\n  console.log(this.name)\n}\n\nlet getname1 = () => {\n  console.log(this.name)\n}\nwindow.name = 'code'\nconst point = {\n  name: \"bug\"\n}\n//直接调用\ngetname()//code\ngetname1()//code 因为声明在全局作用域下，所以指向全局的this的值\n//call方法调用\ngetname.call(point)//bug\ngetname1.call(point)//code 箭头函数的this指向是静态的\n\n2.不能作为构造函数实例化对象\nlet person = (name, age) => {\n  this.name = name,\n  this.age = age\n}\nlet me = new person('wang',23)\nconsole.log(me)//Uncaught TypeError: person is not a constructor\n\n3.不能使用 arguements变量\nlet fn = () =>{\n  console.log(arguments)\n}\nfn(1)//Uncaught ReferenceError: arguments is not defined\n\n4.箭头函数的简写\n①当形参有且仅有一个的时候，省略小括号\nlet add = n => {\n  return n + n\n}\nconsole.log(add(3))//6\n②当函数体只有一句的时候\nlet pow = n => n*n;\nconsole.log(pow(3))//9\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br")])]),n("p",[s._v("2.箭头函数的应用案例")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('1.点击页面的DIV两秒后变色\n<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta http-equiv="X-UA-Compatible" content="IE=edge">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>Document</title>\n  <style>\n    div {\n      width: 200px;\n      height: 200px;\n      background-color: blue;\n    }\n  </style>\n</head>\n<body>\n  <div id="ad"></div>\n</body>\n<script>\nlet ad = document.getElementById(\'ad\')\n//使用匿名函数时需要将外层this的值保存\n// ad.addEventListener(\'click\',function() {\n//   let this1 = this;\n//   setTimeout(function(){\n//     this1.style.backgroundColor = \'pink\';\n//   },2000)\n// })\n//使用箭头函数就不用再做保存，因为箭头函数的this指向声明作用域下的this\nad.addEventListener(\'click\',function() {\n  setTimeout(()=>{\n    this.style.backgroundColor = \'pink\';\n  },2000)\n})\n<\/script>\n</html>\n\n2.返回数组中偶数元素\n\nconst arr = [1,3,6,9,10]\n//传统的匿名函数写法\n// const result = arr.filter(function(item) {\n//   if (item % 2 === 0) {\n//     return true\n//   } else {\n//     return false\n//   }\n// })\n//简化的箭头函数写法\nconst result = arr.filter(item => item % 2 === 0)\nconsole.log(result)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br")])]),n("p",[s._v("3.箭头函数总结")]),s._v(" "),n("ul",[n("li",[s._v("箭头函数适合与 this 无关的回调，定时器，数组方法的回调")]),s._v(" "),n("li",[s._v("箭头函数不适合与 this 有关的，事件的回调，对象方法的回调(不适合不代表不可以)")])]),s._v(" "),n("h2",{attrs:{id:"函数参数的默认值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数参数的默认值"}},[s._v("#")]),s._v(" 函数参数的默认值")]),s._v(" "),n("p",[s._v("ES6 允许给函数的参数赋初始值；")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//1.形参构造值，具有默认值的参数，一般位置要靠后(潜规则)\nfunction add(a,b,c=10){\n    return a+b+c;\n}\nlet result=add(1,2);\nconsole.log(result);//13\n//2.与解构赋值结合\n//注意这里参数是一个对象\nfunction connect({host = \"127.0.1\",username,password,port}) {\n    console.log(host)\n    console.log(username)\n    console.log(password)\n    console.log(port)\n}\nconnect({\n    host: 'atguigu.com',\n    username: 'root',\n    password: 'root',\n    port: 3306\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("h2",{attrs:{id:"rest-参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rest-参数"}},[s._v("#")]),s._v(" rest 参数")]),s._v(" "),n("p",[s._v("ES6 引入 rest 参数，用于获取函数的实参，用来代替 arguments；其中\n*...args 是固定写法要放在形参最后\n*返回结果为数组，可以使用数组的方法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function data() {\n  console.log(arguments)\n}\ndata('春','夏','秋','冬')//返回所有实参，是一个对象\nfunction data1(a,b,...args) {\n  console.log(args)\n}\ndata1('春','夏','秋','冬')//[\"秋\",\"冬\"]返回结果为数组，可以使用数组的方法\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h2",{attrs:{id:"扩展运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩展运算符"}},[s._v("#")]),s._v(" 扩展运算符")]),s._v(" "),n("p",[s._v("扩展运算符（spread）也是三个点（…）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列，对数组进行解包；")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// ... 扩展运算符能将数组转换为逗号分隔的参数序列\nconst SEASON = ['春', '夏', '秋','冬'];\nfunction year() {\nconsole.log(arguments);\n}\nyear(SEASON);//返回一个参数['春', '夏', '秋','冬']\nyear(...SEASON); //相当于year('春', '夏', '秋','冬')返回四个参数'春', '夏', '秋','冬'\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("应用案例:数组的合并，数组的复制，伪数组转换为数组")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//1.数组的合并\nconst a=['梅','兰'];\nconst b=['竹','菊'];\n// 传统的合并方式\n// const c =a.concat(b);\nconst c = [...a, ...b];\n\n//2. 数组的克隆\nconst flower = ['梅','兰','竹','菊'];\nconst gentleman = [...sanzhihua];//需要注意的是，如果是引用类型，则是浅拷贝\n\n//3.将伪数组转换为数组\nconst divs = document.querySelectorAll('div');\nconst divArr = [...divs];\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h2",{attrs:{id:"symbol-新的原始数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#symbol-新的原始数据类型"}},[s._v("#")]),s._v(" Symbol 新的原始数据类型")]),s._v(" "),n("p",[s._v("ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，是一种类似于字符串的数据类型；在后来的谷歌 67 版本中还出现了一种 BigInt。是指安全存储、操作大整数。所以目前 JS 有八种数据类型：Number、String、BOOlean、Null、Undefined、Object、Symbol、BigInt。Symbol 特点：")]),s._v(" "),n("ul",[n("li",[s._v("Symbol 的值是唯一的，用来解决命名冲突的问题；")]),s._v(" "),n("li",[s._v("Symbol 值不能与其他数据进行运算；")]),s._v(" "),n("li",[s._v("Symbol 定义的对象属性不能使用 for…in 循环遍历 ，但是可以使用 Reflect.ownKeys 来获取对象的所有键名；")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//创建Symbol\nlet a = Symbol()\nconsole.log(a,typeof a)//Symbol() 'symbol'\nlet b1 = Symbol('test')//可以在创建时添加描述\nlet b2 = Symbol('test')\nconsole.log(b1 === b2)//false\n//使用Symbol.for创建\nlet b3 = Symbol.for('test')\nlet b4 = Symbol.for('test')\nconsole.log(b3,typeof b3)//Symbol(test) 'symbol'\nconsole.log(b3 === b4)//true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("Symbol 的应用\n为对象添加属性方法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let boy = {\n  name: \"蔡徐坤\",\n  [Symbol('sing')]: function() {\n    console.log('我会唱歌')\n  },\n  [Symbol('dance')]: function() {\n    console.log('我会跳舞')\n  },\n}\nconsole.log(boy)\nboy[Reflect.ownKeys(boy)[1]]()//通过获取键名来调用相应的方法\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h2",{attrs:{id:"迭代器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#迭代器"}},[s._v("#")]),s._v(" 迭代器")]),s._v(" "),n("p",[s._v("迭代器器（Iterator）就是一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作；ES6 创造了一种新的遍历命令 for…of 循环，Iterator 接口主要供 for…of 消费；原生具备 iterator 接口的数据(可用 for of 遍历)：Array；Arguments；Set；Map；String；TypedArray；NodeList；\n工作原理:")]),s._v(" "),n("ol",[n("li",[s._v("创建一个指针对象，指向当前数据结构的起始位置;")]),s._v(" "),n("li",[s._v("第一次调用对象的 next 方法，指针自动指向数据结构的第一个成员;")]),s._v(" "),n("li",[s._v("接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员;")]),s._v(" "),n("li",[s._v("每调用 next 方法返回一个包含 value 和 done 属性的对象；")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('\n// 声明一个数组\nconst xiyou = [\'唐僧\', \'孙悟空\', \'猪八戒\', \'沙僧\'];\n\n// 使用 for...of 遍历数组,返回数组的每一个元素，for in 返回的是0123，键名\nfor(let v of xiyou){\n  console.log(v);\n}\nlet iterator = xiyou[Symbol.iterator]();\n\n// 调用对象的next方法\nconsole.log(iterator.next()); //{"value": "唐僧","done": false}\nconsole.log(iterator.next()); //{"value": "孙悟空","done": false}\nconsole.log(iterator.next()); //{"value": "猪八戒","done": false}\nconsole.log(iterator.next()); //{"value": "沙僧","done": false}\nconsole.log(iterator.next());//{"value": "undefined","done": true}\n\n// 重新初始化对象，指针也会重新回到最前面\nlet iterator1 = xiyou[Symbol.iterator]();\nconsole.log(iterator1.next());//{"value": "唐僧","done": false}\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("p",[s._v("迭代器的应用：当需要自定义遍历数据时。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 声明一个对象\nconst banji = {\n  name: \"first\",\n  stu: ['xiaoming','xiaohong','xiaohua'],\n  [Symbol.iterator]() {\n    let index = 0;\n    //下面如果不使用箭头函数需要在这里保存一下this\n    // let _this = this;\n    return {\n      next: ()=>{\n        if (index < this.stu.length) {\n          const result = {value: this.stu[index],done: false};\n          index++;\n          return result;\n        } else {\n          return {value: undefined,done: true};\n        }\n      }\n    }\n  }\n}\n// 遍历这个对象\nfor(let v of banji){\n  console.log(v)\n}\n//当然也可以直接使用数组的forEach方法\nbanji.stu.forEach(function(item){\n  console.log(item)\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("h2",{attrs:{id:"生成器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#生成器"}},[s._v("#")]),s._v(" 生成器")]),s._v(" "),n("p",[s._v("生成器函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同；生成器中可出现 yield 语句，可认为是生成器的分割线，由 next()方法从上至下依次调用。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 生成器的声明注意*号\nfunction * test(){\n  console.log(111);\n}\nfunction* gen() {\n  console.log(111);\n  yield '一只没有耳朵';\n  console.log(222);\n  yield '一只没有尾部';\n  console.log(333);\n  yield '真奇怪';\n  console.log(444);\n}\nlet iterator = gen();\nlet iterator1 = test()\n// iterator.next()\n// iterator.next()\n// iterator.next()\n// iterator.next()\nconsole.log(iterator1)//不会打印test，会打印一个生成器对象，里面有next方法\nconsole.log(iterator1.next());//通过调用next方法执行生成器里面的语句 111\nconsole.log(iterator.next()); //111 {value：'一只没有耳朵',done: false}\nconsole.log(iterator.next());\nconsole.log(iterator.next());\nconsole.log(iterator.next()); //444 {value: undefined, done:true}\nconsole.log(\"遍历：\");\n//遍历\nfor(let v of gen()){\nconsole.log(v);\n}//111 一只没有耳朵......444\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br")])]),n("p",[s._v("生成器的参数传递，生成器可传入实参，将作为上一个 yield 的返回值。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function* gen(arg) {\n  console.log(arg)\n  let one = yield '一只没有耳朵';\n  console.log(one)\n  let two = yield '一只没有尾部';\n  console.log(two)\n  let three = yield '真奇怪';\n  console.log(three)\n}\nlet iterator = gen('111');\nconsole.log(iterator.next())//111 {value: '一只没有耳朵', done: false}\nconsole.log(iterator.next('222'))//222 {value: '一只没有尾部', done: false}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("生成器函数的应用(异步编程)，文件操作，网络操作，数据库操作。现有一个需求，一秒后打印 1，再过两秒后打印 2，再过三秒后打印 3，这个可以通过定时器的嵌套来实现，但是随着异步操作的数量的增加，会形成回调地狱，代码也会一直缩进，最终超出可见编辑区，阅读起来很不方便。下面给出两种写法，可以直观地看出区别。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 定时器的嵌套\nsetTimeout(()=>{\n  console.log(1)\n  setTimeout(()=>{\n    console.log(2)\n    setTimeout(()=>{\n      console.log(3)\n    },3000)\n  },2000)\n},1000)\n//利用生成器来实现\nfunction one(){\n  setTimeout(()=>{\n    console.log(1)\n    iterator.next()\n  },1000)\n}\nfunction two(){\n  setTimeout(()=>{\n    console.log(2)\n    iterator.next()\n  },2000)\n}\nfunction three(){\n  setTimeout(()=>{\n    console.log(3)\n  },3000)\n}\nfunction* gen() {\n  yield one();\n  yield two();\n  yield three();\n}\nlet iterator = gen()\niterator.next()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br")])]),n("p",[s._v("生成器的另一个应用，模拟用户数据的获取，用户数据，订单数据，商品数据，在获取数据的封装函数下无法操作 data，同时可以利用生成器传参作为上一个 yield 的返回值来拿到数据。代码如下")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function getUsers(){\n  setTimeout(()=>{\n    data = '用户数据'\n    iterator.next(data)\n  },1000)\n}\nfunction getOrders(){\n  setTimeout(()=>{\n    data = '订单数据'\n    iterator.next(data)\n  },1000)\n}\nfunction getGoods(){\n  setTimeout(()=>{\n    data = '商品数据'\n    iterator.next(data)\n  },1000)\n}\nfunction* gen() {\n  let users = yield getUsers();\n  console.log(users)\n  let orders = yield getOrders();\n  console.log(orders)\n  let goods = yield getGoods();\n  console.log(goods)\n}\nlet iterator = gen()\niterator.next()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br")])]),n("h2",{attrs:{id:"promise"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[s._v("#")]),s._v(" Promise")]),s._v(" "),n("p",[s._v("Promise 是 ES6 新提出的异步编程的解决方案，语法上是一个构造函数，用来封装异步操作并可以获得其成功与否的结果。先了解一下他的基本语法。实例化 Promise 对象时需要传入一个函数类型的参数，而且这个函数有两个形参，然后可以在函数里面封装异步操作，调用形参的函数来改变当前的 Promise 对象的状态，然后根据不同状态调用.then()方法中的回调函数，.then()方法里面有两个函数类型的参数，并且两个函数都有一个形参，一般成功的形参为 val，失败的为 res。当异步操作中调用第一个形参的函数时，对应调用.then 中的第一个函数，反则反之。\n.then 方法的返回结果也是一个 Promise 对象，其状态有回调函数的执行结果决定，有以下三种情况：")]),s._v(" "),n("ol",[n("li",[s._v("返回结果为非 Promise 类型的属性，状态为成功，返回值为对象的成功的值")]),s._v(" "),n("li",[s._v("返回结果是 Promise，则由返回的 Promise 对象的状态决定，其成功的值就是返回的值")]),s._v(" "),n("li",[s._v("抛出错误，其状态为失败，返回值为抛出的值")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const p = new Promise(function(reslove,reject){\n  setTimeout(function(){\n    // let data = '用户数据'\n    // reslove(data)\n    let err = '读取失败'\n    reject(err)\n  },1000)\n})\n//返回的结果也是一个Promise对象\np.then(function(val){\n  console.log(val)\n},function(res){\n  console.log(res)\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("Promise 还有一个 catch 方法，用来设置失败状态的回调函数，只有一个参数，其实也就是 then 方法去掉成功的回调函数的写法。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const p = new Promise(function(reslove,reject){\n  setTimeout(function(){\n    // let data = '用户数据'\n    // reslove(data)\n    let err = '读取失败'\n    reject(err)\n  },1000)\n})\np.catch(function(res){\n  console.log(res)\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h2",{attrs:{id:"集合-set"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集合-set"}},[s._v("#")]),s._v(" 集合 Set")]),s._v(" "),n("p",[s._v("ES6 新提出的一种数据结构，与数组类似，不过没有重复的元素，实现了 iterator 接口。集合的属性和方法：")]),s._v(" "),n("ol",[n("li",[s._v("size 返回集合的元素个数；")]),s._v(" "),n("li",[s._v("add 增加一个新元素，返回当前集合；")]),s._v(" "),n("li",[s._v("delete 删除元素，返回 boolean 值；")]),s._v(" "),n("li",[s._v("has 检测集合中是否包含某个元素，返回 boolean 值；")]),s._v(" "),n("li",[s._v("clear 清空集合，返回 undefined；")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// Set集合\nlet s = new Set();\nconsole.log(s,typeof s);\nlet s1 = new Set(["small","middle","middle","large"]);\nconsole.log(s1); // 自动去重\n//实现了iterator接口可使用for of\nfor(let v of s1){\n  console.log(v)\n}\n// 1. size 返回集合的元素个数；\nconsole.log(s1.size);\n// 2. add 增加一个新元素，返回当前集合；\ns1.add("normal");\nconsole.log(s1);\n// 3. delete 删除元素，返回 boolean 值；\nlet result = s1.delete("normal");\nconsole.log(result);\nconsole.log(s1);\n// 4. has 检测集合中是否包含某个元素，返回 boolean 值；\nlet r1 = s1.has("small");\nconsole.log(r1);\n// 5. clear 清空集合\ns1.clear();\nconsole.log(s1);\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])]),n("p",[s._v("Set 的应用实践：")]),s._v(" "),n("ol",[n("li",[s._v("数组去重 2. 求交集 3. 求并集 4. 求差集")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let arr1 = [1,1,2,3,3,4,5]\n//数组去重\nlet only = [...new Set(arr1)]\nconsole.log(only)\n//求交集\nlet arr2 = [3,4,4,5,5]\nlet common = [...new Set(arr1)].filter(item => new Set(arr2).has(item))\nconsole.log(common)\n//求并集\nlet total = new Set([...arr1,...arr2])\nconsole.log(total)\n// 差集：比如集合1和集合2求差集，就是1里面有的，2里面没的\nlet result1 = [...new Set(arr1)].filter(item=>!(new Set(arr2).has(item)));\nconsole.log(result1);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h2",{attrs:{id:"map"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[s._v("#")]),s._v(" Map")]),s._v(" "),n("p",[s._v("ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合。但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。Map 也实现了 iterator 接口。Map 的方法：")]),s._v(" "),n("ol",[n("li",[s._v("size 返回 Map 的元素个数；")]),s._v(" "),n("li",[s._v("set 增加一个新元素，返回当前 Map;")]),s._v(" "),n("li",[s._v("get 返回键名对象的键值；")]),s._v(" "),n("li",[s._v("has 检测 Map 中是否包含某个元素，返回 boolean 值；")]),s._v(" "),n("li",[s._v("clear 清空，返回 undefined；\n代码示例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//声明Map\nlet m = new Map()\nconsole.log(m,typeof m)\n//添加元素\nm.set('job','front')\nm.set('ability',function() {\n  console.log('我可以优化用户体验')\n})\nlet localtion = {\n  work: '杭州'\n}\nm.set(localtion,['南京','深圳'])\nconsole.log(m)\n//size 返回 Map 的元素个数；\nconsole.log(m.size)//3\n//删除delete\nm.delete(localtion)\n//获取get\nconsole.log(m.get('ability'))\n//for of 遍历\nfor (let v of m){\n  console.log(v)\n}\n//清空\nm.clear()\nconsole.log(m.clear())//undefined\nconsole.log(m)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])]),n("h2",{attrs:{id:"类-class"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类-class"}},[s._v("#")]),s._v(" 类 Class")]),s._v(" "),n("p",[s._v("ES6 引入了类 Class 的概念，作为对象的模板。通过 Class 关键字声明，它的绝大多数功能 ES5 都能实现，新的 Class 写法只是让对象原型的写法更加清晰，更像面向对象的写法。知识点：")]),s._v(" "),n("ol",[n("li",[s._v("Class 声明")]),s._v(" "),n("li",[s._v("constructor 定义构造函数初始化")]),s._v(" "),n("li",[s._v("static 定义静态属性和方法")]),s._v(" "),n("li",[s._v("extends 继承父类")]),s._v(" "),n("li",[s._v("super 调用父级构造函数")]),s._v(" "),n("li",[s._v("父类方法的重写")]),s._v(" "),n("li",[s._v("class 中的 set 和 get")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//ES6之前的写法\nfunction phone(brand,price){\n  this.brand = brand;\n  this.price = price;\n}\n//添加方法\nphone.prototype.call = function(){\n  console.log('我可以打电话')\n}\nlet xiaomi = new phone('mi13',5999)\nxiaomi.call()\nconsole.log(xiaomi)\n\n//ES6类Class的声明写法\nclass mobilePhone{\n  //构造方法关键字constructor\n  constructor(brand,price){\n    this.brand = brand;\n    this.price = price;\n  }\n  //添加方法必须以这种形式，不能写完整对象键值对的形式\n  call(){\n    console.log('我可以打电话')\n  }\n}\nlet redMi = new mobilePhone('K60',2999)\nredMi.call()\nconsole.log(redMi)\n\n\n//静态属性static\n//ES5的静态成员，静态成员属于函数不属于实例对象\nfunction phone(){}\nphone.name = 'xiaomi'\nphone.ability = function(){\n  console.log('我可以通信')\n}\nphone.prototype.size = 'middle'\nlet xiaomi = new phone()\nconsole.log(xiaomi.name)//undefined\nconsole.log(xiaomi.size)//middle\n//xiaomi.ability()//xiaomi.ability is not a function\n\n//ES6的对应static属性，static属性属于类class，不属于实例对象\nclass mobilePhone{\n  static name = 'xiaomi'\n  static ability(){\n    console.log('我可以通信')\n  }\n}\n//实例化\nlet mi = new mobilePhone()\nconsole.log(mi.name)//undefined\nconsole.log(mobilePhone.name)//xiaomi\n\n\n//对象继承\n//对象继承ES5构造函数继承写法\nfunction phone(name,price){\n  this.name = name;\n  this.price = price;\n}\nphone.prototype.call = function(){\n  console.log('我可以通信')\n}\nfunction mobilePhone(name,price,color,size){\n  phone.call(this,name,price);//等同于下面两行的效果\n  this.color = color;\n  this.size = size;\n}\n//设置子级构造函数原型\nmobilePhone.prototype = new phone()\nmobilePhone.prototype.constructor = mobilePhone\n//声明子类方法\nmobilePhone.prototype.ability = function(){\n  console.log('我可以通信')\n}\nconst xiaomi = new mobilePhone('mi13','5999','blue','6.1inch')\nconsole.log(xiaomi)\nxiaomi.call()\nxiaomi.ability()\n//ES6类的继承\nclass phone{\n  constructor(brand,price){\n    this.brand = brand;\n    this.price = price;\n  }\n  //成员属性\n  call(){\n    console.log('我可以通信')\n  }\n}\nclass mobilePhone extends phone {\n  //构造方法\n  constructor(brand,price,color,size){\n    super(brand,price);//等同于phone.call(this,brand,price)和下面的写法\n    this.color = color;\n    this.size = size\n  }\n  //子类方法\n  ability(){\n    console.log('我可以通信')\n  }\n  //子类对父类方法的重写，直接在子类声明同名函数即可\n  call(){\n    console.log('我可以实时通信')\n  }\n}\nconst xiaomi = new mobilePhone('mi13','5999','blue','6.1inch')\nxiaomi.call()//我可以实时通信\nxiaomi.ability()//我可以通信\n\n\n类的get 和set\n//get和set 获取和设置属性时\nclass phone{\n  get price(){\n    console.log('获取价格');\n    return 123//返回值为属性的值\n  }\n  //set需要一个参数，参数可设置判断条件\n  set price(val){\n    console.log('设置了价格')\n  }\n}\nlet xiaomi = new phone()\nconsole.log(xiaomi.price)//获取价格 123\nxiaomi.price = '1999'//设置了价格\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br"),n("span",{staticClass:"line-number"},[s._v("96")]),n("br"),n("span",{staticClass:"line-number"},[s._v("97")]),n("br"),n("span",{staticClass:"line-number"},[s._v("98")]),n("br"),n("span",{staticClass:"line-number"},[s._v("99")]),n("br"),n("span",{staticClass:"line-number"},[s._v("100")]),n("br"),n("span",{staticClass:"line-number"},[s._v("101")]),n("br"),n("span",{staticClass:"line-number"},[s._v("102")]),n("br"),n("span",{staticClass:"line-number"},[s._v("103")]),n("br"),n("span",{staticClass:"line-number"},[s._v("104")]),n("br"),n("span",{staticClass:"line-number"},[s._v("105")]),n("br"),n("span",{staticClass:"line-number"},[s._v("106")]),n("br"),n("span",{staticClass:"line-number"},[s._v("107")]),n("br"),n("span",{staticClass:"line-number"},[s._v("108")]),n("br"),n("span",{staticClass:"line-number"},[s._v("109")]),n("br"),n("span",{staticClass:"line-number"},[s._v("110")]),n("br"),n("span",{staticClass:"line-number"},[s._v("111")]),n("br"),n("span",{staticClass:"line-number"},[s._v("112")]),n("br"),n("span",{staticClass:"line-number"},[s._v("113")]),n("br"),n("span",{staticClass:"line-number"},[s._v("114")]),n("br"),n("span",{staticClass:"line-number"},[s._v("115")]),n("br"),n("span",{staticClass:"line-number"},[s._v("116")]),n("br"),n("span",{staticClass:"line-number"},[s._v("117")]),n("br"),n("span",{staticClass:"line-number"},[s._v("118")]),n("br"),n("span",{staticClass:"line-number"},[s._v("119")]),n("br"),n("span",{staticClass:"line-number"},[s._v("120")]),n("br"),n("span",{staticClass:"line-number"},[s._v("121")]),n("br"),n("span",{staticClass:"line-number"},[s._v("122")]),n("br"),n("span",{staticClass:"line-number"},[s._v("123")]),n("br"),n("span",{staticClass:"line-number"},[s._v("124")]),n("br"),n("span",{staticClass:"line-number"},[s._v("125")]),n("br"),n("span",{staticClass:"line-number"},[s._v("126")]),n("br"),n("span",{staticClass:"line-number"},[s._v("127")]),n("br"),n("span",{staticClass:"line-number"},[s._v("128")]),n("br")])]),n("h2",{attrs:{id:"数值扩展"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数值扩展"}},[s._v("#")]),s._v(" 数值扩展")]),s._v(" "),n("ol",[n("li",[s._v("Number.EPSILON 是 js 中的最小精度约等于 2.220446049250313e-16")]),s._v(" "),n("li",[s._v("二进制(0b)和八进制(0o)")]),s._v(" "),n("li",[s._v("Number.isFinite 检测一个数是否为有限数，返回值为 true 和 false")]),s._v(" "),n("li",[s._v("Number.isNaN 用来检测一个数值是否为 NaN，返回值为 true 和 false")]),s._v(" "),n("li",[s._v("Number.parseInt，Number.parseFloat，将字符串转为整数和浮点数")]),s._v(" "),n("li",[s._v("Number.Integer 判断一个数是否为整数，返回值为 true 和 false")]),s._v(" "),n("li",[s._v("Math.trunc 将小数部分抹掉，也就是向下取整")]),s._v(" "),n("li",[s._v("Math.sign 判断一个数到底为整数，负数，还是 0，分别返回 1 -1 0")])]),s._v(" "),n("h2",{attrs:{id:"对象方法的扩展"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对象方法的扩展"}},[s._v("#")]),s._v(" 对象方法的扩展")]),s._v(" "),n("ol",[n("li",[s._v("Object.is 判断两个值是否完全相等，与全等===相似，不同之处在于判断两个 NaN 时，全等返回 false，而该方法返回 true")]),s._v(" "),n("li",[s._v("Object.assign(a,b)对象的合并，用 b 去覆盖 a 中的值，b 中没有的保持 a 中的值")]),s._v(" "),n("li",[s._v("Object.setPrototypeOf(a,b)设置 b 作为 a 的原型对象 Object.getPrototypeOf()获取原型")])]),s._v(" "),n("h2",{attrs:{id:"模块化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模块化"}},[s._v("#")]),s._v(" 模块化")]),s._v(" "),n("p",[s._v("模块化就是将一个大的程序文件拆分成小的文件，然后把小文件组合起来。模块化的好处：")]),s._v(" "),n("ul",[n("li",[s._v("防止命名冲突")]),s._v(" "),n("li",[s._v("代码复用")]),s._v(" "),n("li",[s._v("高维护性\nES6 之前的模块化规范产品")]),s._v(" "),n("li",[s._v("commonJS => NodeJS Browserify")]),s._v(" "),n("li",[s._v("AMD => requireJS")]),s._v(" "),n("li",[s._v("CMD => seaJS\nES6 模块化语法\n模块功能主要由两个命令组成：export(用于规定模块对外的接口)和 import(用于输入其他模块的功能)。基本语法：先在需要暴露的模块中使用 export，然后在需要引入的模块用 import 导入。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//a.js文件\n//分别暴露，在声明之前加上export\nexport let a = '模块化'\nexport function improve() {\n  console.log('代码复用')\n}\n\n//统一暴露\nlet a = '模块化'\nfunction improve() {\n  console.log('代码复用')\n}\nexport {school,improve}\n\n//默认暴露，需要注意的是，前面两种方法的暴露可以直接使用里面的变量或者方法，使用默认暴露是要加一层default，即a.default.improve()\nexport default {\n  let a = '模块化'\n  function improve() {\n  console.log('代码复用')\n}\n}\n\n//index.html文件要引入的模块\n<script type=\"moudle\">\n//1.通用的导入方式\nimport * as a from 'a.js'//a为引入模块到当前模块内的名字，a.js是路径\n//2.解构赋值形式\nimport {school,improve} from 'a.js'//若有重名可在名字后加as重新命名\nimport {default as m1} from 'a,js'//当暴露方式是默认暴露时，必须重新命名\n//3.简便形式，只针对默认暴露生效\nimport m2 from 'a.js'\n<\/script>\n//上面是第一种在js中使用模块化的写法，下面是第二种\n//app.js作为入口文件来写引入模块的语句，然后在需要引入的文件的script标签里引入app.js文件就可以了\n<script src=\"app.js\" type=\"moudle\"><\/script>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);